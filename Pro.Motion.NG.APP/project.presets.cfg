[.info]
version=8

[preset_default_1]
version=8
title=Default
type=0
colors.paletteFile=default.pal
channel.red.bits=8
channel.green.bits=8
channel.blue.bits=8
channel.alpha.bits=8
pixel.width=1
pixel.height=1
animation.fileType=gif
image.fileType=png
notes=Default project presets using a standard palette and gradients.\n
gradient.count=8
gradient.selected=-1
gradient_0.isRange=1
gradient_0.speed=25
gradient_0.multiShadeEnabled=0
gradient_0.cycleEnabled=1
gradient_0.title=
gradient_0.rangeStart=1
gradient_0.rangeEnd=15
gradient_1.isRange=1
gradient_1.speed=25
gradient_1.multiShadeEnabled=0
gradient_1.cycleEnabled=1
gradient_1.title=
gradient_1.rangeStart=16
gradient_1.rangeEnd=27
gradient_2.isRange=1
gradient_2.speed=25
gradient_2.multiShadeEnabled=0
gradient_2.cycleEnabled=0
gradient_2.title=
gradient_2.rangeStart=40
gradient_2.rangeEnd=51
gradient_3.isRange=1
gradient_3.speed=25
gradient_3.multiShadeEnabled=0
gradient_3.cycleEnabled=0
gradient_3.title=
gradient_3.rangeStart=64
gradient_3.rangeEnd=75
gradient_4.isRange=1
gradient_4.speed=25
gradient_4.multiShadeEnabled=0
gradient_4.cycleEnabled=0
gradient_4.title=
gradient_4.rangeStart=100
gradient_4.rangeEnd=111
gradient_5.isRange=1
gradient_5.speed=25
gradient_5.multiShadeEnabled=0
gradient_5.cycleEnabled=0
gradient_5.title=
gradient_5.rangeStart=148
gradient_5.rangeEnd=159
gradient_6.isRange=1
gradient_6.speed=25
gradient_6.multiShadeEnabled=0
gradient_6.cycleEnabled=0
gradient_6.title=
gradient_6.rangeStart=196
gradient_6.rangeEnd=207
gradient_7.isRange=1
gradient_7.speed=25
gradient_7.multiShadeEnabled=0
gradient_7.cycleEnabled=0
gradient_7.title=
gradient_7.rangeStart=244
gradient_7.rangeEnd=255
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=0
colorConstraints.maxPaletteEntry=255
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_2]
version=8
title=Amiga AGA (Advanced Graphics Architecture) PAL
type=0
canvas.width=320
canvas.height=256
colors.paletteFile=brilliance.pal
channel.red.bits=8
channel.green.bits=8
channel.blue.bits=8
channel.alpha.bits=8
background.mode=5
background.colorIndex=0
image.fileType=iff
notes=Standard game resolution: 320x200 (NTSC 60 FPS) or 320x256 (PAL 50 FPS),(often reduced to 288 pixels wide to provide the game more time to process sprites, color changes, object blitting etc.)\n\ncolor range: 16.7 million possible, 8 bits per color channel.Number of color indexes available: typically 16 or 32, but up to 256\nDual playfield mode (for layered scrolling) two separate palettes, 16 for the back layer and then 15 plus a transparent index for the front layer.\n\nSprites: 8 three color (plus a “clear” index for transparent pixels) sprites per scan line which can be all be set to be 16, 32, or 64 pixels wide (the width setting applies to all sprites), and as tall as the screen. 2 three color sprites can be combined to create a single 16 color sprite! This means you can have 4 sixteen color sprites or 2 sixteen color sprites and 4 three color sprites etc. You can have many more sprites than 8 on screen, but any more than 8 per scan line will result in sprites flickering (becoming invisible) \nNOTE: Most Amiga games use “blitter” objects instead of or in addition to sprites to allow for many more, larger, and more colorful objects on screen. Blitter objects draw right into the background so can only use the same color indexes as the background.  This means if you're using dual playfield mode for layered scrolling, blitter objects can only use the same 15 color indexes as the foreground play-field.NOTE 2: As an alternative to using the standard dual playfield mode with 15 and 16 colors respectively per layer, AGA Amigas were powerful enough to simulate 2 players with the blitter system. This could theoretically let you create games with much more colorful front layers and moving objects. Even the considerably weaker OCS Amigas could use this blitter approach to create action games with an 8 color back layer and a 32 color front layer. AGA Amiga's could likely double that color count. EXAMPLE: https://youtu.be/-owMNnyS7_U\n\nFor more information, click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-AmigaAGA.htm
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=0
colorConstraints.maxPaletteEntry=255
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_3]
version=8
title=Amiga OCS/ECS Low Res NTSC
type=0
canvas.width=320
canvas.height=200
colors.paletteFile=brilliance.pal
channel.red.bits=4
channel.green.bits=4
channel.blue.bits=4
channel.alpha.bits=2
background.mode=5
background.colorIndex=0
animation.fileType=sbmp
image.fileType=iff
notes=OCS Amiga games typically used 32 or 16 color indexes 320X200 (NTSC 60 FPS) or 320X256 (PAL 50 FPS)The Amiga had extremely limited sprite capabilities, as it was designed to use its custom blitting system to draw moving objects instead. The plus side to using blitted objects was there is no direct limit to how many moving objects you can have on-screen or per scan-line, but the drawback is that the blitted objects ("bobs") could only be drawn using the exact same colors at the background was using.\n\nIf you wanted 2 full layers scrolling separately in an Amiga game and were to rely on the standard method, you'd be reduced to an 8 color background layer and a 7 color foreground layer (7 colors plus the transparent index so you can see the back layer behind it), with only a handful of sprites to try to add more color to the screen, typically used to create a player sprite using 15 additional colors. Example: https://youtu.be/7GHoqRscnOk\n\nThe most visually appealing Amiga games used tricks to use the Amiga hardware in special ways to get around these limitations.\n\nOne method tricks the sprite hardware into creating an entire background layer out of a repeating sprite pattern (typically 64 pixels wide and 16 colors ), which allows for a great looking game where the back layer has 16 colors and the front has its own separate 16 colors or even 32 (it's own 16 plus the same 16 the sprite generated back layer uses)  Example: https://youtu.be/EChseE1P65AThe other method simply creates the layered scrolling with pure blitting horse-power, accepting less that 60 FPS (50 for PAL regions) in exchange for the layered scrolling. The Amiga port of Toki is a great example of this method to create a 32 color (8 color back layer and a 32 color foreground and blitted objects) layered scrolling Amiga action game.  <https://youtu.be/-owMNnyS7_U>For more detailed information, click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-AmigaOCS.htm\n\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=0
colorConstraints.maxPaletteEntry=255
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_4]
version=8
title=Amiga OCS/ECS LowRes PAL
type=0
canvas.width=320
canvas.height=256
colors.paletteFile=brilliance.pal
channel.red.bits=4
channel.green.bits=4
channel.blue.bits=4
channel.alpha.bits=2
background.mode=5
background.colorIndex=0
image.fileType=iff
notes=OCS Amiga games typically used 32 or 16 color indexes 320X200 (NTSC 60 FPS) or 320X256 (PAL 50 FPS)The Amiga had extremely limited sprite capabilities, as it was designed to use its custom blitting system to draw moving objects instead. The plus side to using blitted objects was there is no direct limit to how many moving objects you can have on-screen or per scan-line, but the drawback is that the blitted objects ("bobs") could only be drawn using the exact same colors at the background was using.\n\nIf you wanted 2 full layers scrolling separately in an Amiga game and were to rely on the standard method, you'd be reduced to an 8 color background layer and a 7 color foreground layer (7 colors plus the transparent index so you can see the back layer behind it), with only a handful of sprites to try to add more color to the screen, typically used to create a player sprite using 15 additional colors. Example: https://youtu.be/7GHoqRscnOk\n\nThe most visually appealing Amiga games used tricks to use the Amiga hardware in special ways to get around these limitations.\n\nOne method tricks the sprite hardware into creating an entire background layer out of a repeating sprite pattern (typically 64 pixels wide and 16 colors ), which allows for a great looking game where the back layer has 16 colors and the front has its own separate 16 colors or even 32 (it's own 16 plus the same 16 the sprite generated back layer uses)  Example: https://youtu.be/EChseE1P65AThe other method simply creates the layered scrolling with pure blitting horse-power, accepting less that 60 FPS (50 for PAL regions) in exchange for the layered scrolling. The Amiga port of Toki is a great example of this method to create a 32 color (8 color back layer and a 32 color foreground and blitted objects) layered scrolling Amiga action game.  <https://youtu.be/-owMNnyS7_U>For more detailed information, click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-AmigaOCS.htm\n\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=0
colorConstraints.maxPaletteEntry=255
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_5]
version=8
title=Aniga OCS/ECS Sprite-Made Back layer
type=1
canvas.width=5
canvas.height=3
tile.width=64
tile.height=64
tile.mirrorX=0
tile.mirrorY=0
tile.count=4
colors.paletteFile=brilliance.pal
channel.red.bits=4
channel.green.bits=4
channel.blue.bits=4
channel.alpha.bits=2
background.mode=5
background.colorIndex=0
drawingGrid.width=64
drawingGrid.height=64
drawingGrid.show=1
lockGrid.width=64
lockGrid.height=64
lockGrid.enable=0
image.fileType=iff
notes=For layered scrolling, two fantastic alternatives to strict hardware “dual playfield mode” were developed and used to great effects in some of the most impressive Amiga games.This method puts incredible use to the Amiga's seemingly feeble sprites. Through some trickery too complicated to cover here, it was discovered that sprites could be cloned horizontally across the entire screen with no flicker problem. Combining this with the fact that sprites can be displayed behind the background instead of  over it, clever developers realized they could create colorful and detailed 16 color back layers entirely from a repeating pattern of sprites! This meant that even OCS Amiga games could have full screen double layered scrolling with a 16 color back layer made of Sprites and a 16 or even 32 layer foreground! Now the blitter could be used to make nice, colorful 16 or 32 color player objects, enemies, effects etc on the front layer! It's very important to note that the last 16 color indexes in an Amiga's 32 indexes are always used for the sprites, so, if you used sprites to make a back playfield (layer) and made a 32 color front layer, the front layer would share its last 16 colors with the 16 colors of the sprites. To get a 16 color Sprite the Amiga must combine 2 of its three color sprites. This means the Amiga can produce four 16 color sprites in total, at 16 pixels wide each. That means the pattern you can design to repeat across the screen should be 64 pixels wide and as tall as the screen. Also keep in mind, the first color index for sprites (color index 16) is used for transparent pixels, so you can't use it in the repeating pattern. \nSince this method uses Amiga sprites, used color indexes 17 through 32 only. Color index 16 is used by the sprite hardware for the sprites transparent pixels so that color index 0 (the "background color") can show through.. this is typically kept black so the game's screen borders are black.\n\nFor more information, click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-AmigaOCS.htm
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=1
colorConstraints.maxPaletteEntry=31
colorConstraints.limitOverallColors=1
colorConstraints.overallColors=16

[preset_default_6]
version=8
title=C64 - FLI Image
type=0
canvas.width=160
canvas.height=200
colors.paletteFile=c64 pepto extended.pal
channel.red.bits=8
channel.green.bits=8
channel.blue.bits=8
channel.alpha.bits=8
transparency.mode=1
background.mode=5
background.colorIndex=0
drawingGrid.width=4
drawingGrid.height=8
drawingGrid.show=1
pixel.width=2
pixel.height=1
animation.fileType=sbmp
image.fileType=bmp
notes=The C64 FLI Bitmap is based on standard Multi Color Bitmap but uses a trick to increase the number of colors per 4x8 pixel character (tile). This is done by switching the color banks with every scan line.\nDue to side effects of that trick you can not use colors in the first 12 pixel columns. This mode is not used for games but for still images.\n\nYou can use up to 4 colors from the predefined 16 colors per 4x1 pixel area. One of those colors is a global background color which is typically set to be the black color index 0.\n\nThe standard C64 color palette uses fixed 16 color entries you can choose from.\nThe color palette used in this preset contains duplicate entries of those colors to show different color arrangements that are typically used.\n\nIf you want to use the graphics in conjunction with an image converter software that only supports graphics that strictly use the first 16 colors then you can select the gradient "C64 standard palette range". Then use menu "Colors/Remap Colors/Frames(s) to Gradient" to remap all colors to the first 16 color entries in the palette.\n\nThe color constrains function helps you to identify pixels that exceed the limits. Use menu "Colors/Color Constraints/Chech for Errors" to reveal invalid color combinations.\n\nFor more information see:\nhttps://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-c64.htm\n
gradient.count=11
gradient.selected=-1
gradient_0.isRange=1
gradient_0.speed=25
gradient_0.multiShadeEnabled=0
gradient_0.cycleEnabled=0
gradient_0.title=C64 standard palette range
gradient_0.rangeStart=0
gradient_0.rangeEnd=15
gradient_1.isRange=0
gradient_1.speed=0
gradient_1.multiShadeEnabled=0
gradient_1.cycleEnabled=0
gradient_1.title=
gradient_1.size=4
gradient_1.slot_0.paletteIndex=11
gradient_1.slot_0.keyIndex=1
gradient_1.slot_1.paletteIndex=12
gradient_1.slot_1.keyIndex=1
gradient_1.slot_2.paletteIndex=15
gradient_1.slot_2.keyIndex=1
gradient_1.slot_3.paletteIndex=1
gradient_1.slot_3.keyIndex=1
gradient_2.isRange=0
gradient_2.speed=25
gradient_2.multiShadeEnabled=0
gradient_2.cycleEnabled=0
gradient_2.title=
gradient_2.size=3
gradient_2.slot_0.paletteIndex=9
gradient_2.slot_0.keyIndex=1
gradient_2.slot_1.paletteIndex=12
gradient_2.slot_1.keyIndex=1
gradient_2.slot_2.paletteIndex=15
gradient_2.slot_2.keyIndex=1
gradient_3.isRange=0
gradient_3.speed=0
gradient_3.multiShadeEnabled=0
gradient_3.cycleEnabled=0
gradient_3.title=
gradient_3.size=4
gradient_3.slot_0.paletteIndex=9
gradient_3.slot_0.keyIndex=1
gradient_3.slot_1.paletteIndex=8
gradient_3.slot_1.keyIndex=1
gradient_3.slot_2.paletteIndex=5
gradient_3.slot_2.keyIndex=1
gradient_3.slot_3.paletteIndex=13
gradient_3.slot_3.keyIndex=1
gradient_4.isRange=0
gradient_4.speed=0
gradient_4.multiShadeEnabled=0
gradient_4.cycleEnabled=0
gradient_4.title=
gradient_4.size=3
gradient_4.slot_0.paletteIndex=5
gradient_4.slot_0.keyIndex=1
gradient_4.slot_1.paletteIndex=13
gradient_4.slot_1.keyIndex=1
gradient_4.slot_2.paletteIndex=1
gradient_4.slot_2.keyIndex=1
gradient_5.isRange=0
gradient_5.speed=25
gradient_5.multiShadeEnabled=0
gradient_5.cycleEnabled=0
gradient_5.title=
gradient_5.size=3
gradient_5.slot_0.paletteIndex=9
gradient_5.slot_0.keyIndex=1
gradient_5.slot_1.paletteIndex=5
gradient_5.slot_1.keyIndex=1
gradient_5.slot_2.paletteIndex=3
gradient_5.slot_2.keyIndex=1
gradient_6.isRange=0
gradient_6.speed=0
gradient_6.multiShadeEnabled=0
gradient_6.cycleEnabled=0
gradient_6.title=
gradient_6.size=6
gradient_6.slot_0.paletteIndex=6
gradient_6.slot_0.keyIndex=1
gradient_6.slot_1.paletteIndex=4
gradient_6.slot_1.keyIndex=1
gradient_6.slot_2.paletteIndex=14
gradient_6.slot_2.keyIndex=1
gradient_6.slot_3.paletteIndex=3
gradient_6.slot_3.keyIndex=1
gradient_6.slot_4.paletteIndex=13
gradient_6.slot_4.keyIndex=1
gradient_6.slot_5.paletteIndex=1
gradient_6.slot_5.keyIndex=1
gradient_7.isRange=0
gradient_7.speed=0
gradient_7.multiShadeEnabled=0
gradient_7.cycleEnabled=0
gradient_7.title=
gradient_7.size=3
gradient_7.slot_0.paletteIndex=6
gradient_7.slot_0.keyIndex=1
gradient_7.slot_1.paletteIndex=14
gradient_7.slot_1.keyIndex=1
gradient_7.slot_2.paletteIndex=1
gradient_7.slot_2.keyIndex=1
gradient_8.isRange=0
gradient_8.speed=0
gradient_8.multiShadeEnabled=0
gradient_8.cycleEnabled=0
gradient_8.title=
gradient_8.size=4
gradient_8.slot_0.paletteIndex=9
gradient_8.slot_0.keyIndex=1
gradient_8.slot_1.paletteIndex=8
gradient_8.slot_1.keyIndex=1
gradient_8.slot_2.paletteIndex=10
gradient_8.slot_2.keyIndex=1
gradient_8.slot_3.paletteIndex=7
gradient_8.slot_3.keyIndex=1
gradient_9.isRange=0
gradient_9.speed=25
gradient_9.multiShadeEnabled=0
gradient_9.cycleEnabled=0
gradient_9.title=
gradient_9.size=3
gradient_9.slot_0.paletteIndex=2
gradient_9.slot_0.keyIndex=1
gradient_9.slot_1.paletteIndex=10
gradient_9.slot_1.keyIndex=1
gradient_9.slot_2.paletteIndex=1
gradient_9.slot_2.keyIndex=1
gradient_10.isRange=0
gradient_10.speed=25
gradient_10.multiShadeEnabled=0
gradient_10.cycleEnabled=0
gradient_10.title=
gradient_10.size=4
gradient_10.slot_0.paletteIndex=11
gradient_10.slot_0.keyIndex=1
gradient_10.slot_1.paletteIndex=4
gradient_10.slot_1.keyIndex=1
gradient_10.slot_2.paletteIndex=10
gradient_10.slot_2.keyIndex=1
gradient_10.slot_3.paletteIndex=7
gradient_10.slot_3.keyIndex=1
colorConstraints.globalColors=0
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=1
colorConstraints.tileWidth=4
colorConstraints.tileHeight=1
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=1
colorConstraints.maxPaletteEntry=15
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_7]
version=8
title=C64 - Multi Color Character Screen
type=1
canvas.width=40
canvas.height=25
frameCount=1
tile.width=4
tile.height=8
tile.mirrorX=0
tile.mirrorY=0
tile.count=256
colors.paletteFile=c64 pepto extended.pal
channel.red.bits=8
channel.green.bits=8
channel.blue.bits=8
channel.alpha.bits=8
transparency.mode=1
background.mode=5
background.colorIndex=16
drawingGrid.width=4
drawingGrid.height=8
drawingGrid.show=1
pixel.width=2
pixel.height=1
animation.fileType=sbmp
image.fileType=bmp
notes=The C64 Multi Color Character mode is primarily used to create ingame scrolling backgrounds.\n\nThe screen is divided into 4x8 pixel sized characters (tiles) and you can have a maximum of 256 characters. As with all multi color modes the pixels have a size ratio of 2x1.\nA full screen uses 40x25 characters having an overall resolution of 160x200 pixels.\n\nEvery character shares three common colors. One of it is the background color that is used for all transparent pixels. So this color is considered to be the one that is mostly used on the screen. The other two can be defined globally as well.\n\nEvery character can use an individual color additionally, but this color is limited to be one out of the first 8 colors of the fixed C64 color palette. This makes creating colorful game backgrounds to be very hard.\n\nThis preset uses two gray shades as the global colors. The transparent color is defined to be color index 16. It serves as background color and initially black. Copy the one of the C64 colors that you actually want to use as background  to that slot.\nChange the other two global colors to your needs in the color constraint settings.\n\nThe color constrains function helps you to identify pixels that exceed the limits. Use menu "Colors/Color Constraints/Check for Errors" to reveal invalid color combinations.\n\nFor more information see:\nhttps://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-c64.htm\n
gradient.count=11
gradient.selected=-1
gradient_0.isRange=1
gradient_0.speed=25
gradient_0.multiShadeEnabled=0
gradient_0.cycleEnabled=0
gradient_0.title=C64 standard palette range
gradient_0.rangeStart=0
gradient_0.rangeEnd=15
gradient_1.isRange=0
gradient_1.speed=0
gradient_1.multiShadeEnabled=0
gradient_1.cycleEnabled=0
gradient_1.title=
gradient_1.size=4
gradient_1.slot_0.paletteIndex=11
gradient_1.slot_0.keyIndex=1
gradient_1.slot_1.paletteIndex=12
gradient_1.slot_1.keyIndex=1
gradient_1.slot_2.paletteIndex=15
gradient_1.slot_2.keyIndex=1
gradient_1.slot_3.paletteIndex=1
gradient_1.slot_3.keyIndex=1
gradient_2.isRange=0
gradient_2.speed=25
gradient_2.multiShadeEnabled=0
gradient_2.cycleEnabled=0
gradient_2.title=
gradient_2.size=3
gradient_2.slot_0.paletteIndex=9
gradient_2.slot_0.keyIndex=1
gradient_2.slot_1.paletteIndex=12
gradient_2.slot_1.keyIndex=1
gradient_2.slot_2.paletteIndex=15
gradient_2.slot_2.keyIndex=1
gradient_3.isRange=0
gradient_3.speed=0
gradient_3.multiShadeEnabled=0
gradient_3.cycleEnabled=0
gradient_3.title=
gradient_3.size=4
gradient_3.slot_0.paletteIndex=9
gradient_3.slot_0.keyIndex=1
gradient_3.slot_1.paletteIndex=8
gradient_3.slot_1.keyIndex=1
gradient_3.slot_2.paletteIndex=5
gradient_3.slot_2.keyIndex=1
gradient_3.slot_3.paletteIndex=13
gradient_3.slot_3.keyIndex=1
gradient_4.isRange=0
gradient_4.speed=0
gradient_4.multiShadeEnabled=0
gradient_4.cycleEnabled=0
gradient_4.title=
gradient_4.size=3
gradient_4.slot_0.paletteIndex=5
gradient_4.slot_0.keyIndex=1
gradient_4.slot_1.paletteIndex=13
gradient_4.slot_1.keyIndex=1
gradient_4.slot_2.paletteIndex=1
gradient_4.slot_2.keyIndex=1
gradient_5.isRange=0
gradient_5.speed=25
gradient_5.multiShadeEnabled=0
gradient_5.cycleEnabled=0
gradient_5.title=
gradient_5.size=3
gradient_5.slot_0.paletteIndex=9
gradient_5.slot_0.keyIndex=1
gradient_5.slot_1.paletteIndex=5
gradient_5.slot_1.keyIndex=1
gradient_5.slot_2.paletteIndex=3
gradient_5.slot_2.keyIndex=1
gradient_6.isRange=0
gradient_6.speed=0
gradient_6.multiShadeEnabled=0
gradient_6.cycleEnabled=0
gradient_6.title=
gradient_6.size=6
gradient_6.slot_0.paletteIndex=6
gradient_6.slot_0.keyIndex=1
gradient_6.slot_1.paletteIndex=4
gradient_6.slot_1.keyIndex=1
gradient_6.slot_2.paletteIndex=14
gradient_6.slot_2.keyIndex=1
gradient_6.slot_3.paletteIndex=3
gradient_6.slot_3.keyIndex=1
gradient_6.slot_4.paletteIndex=13
gradient_6.slot_4.keyIndex=1
gradient_6.slot_5.paletteIndex=1
gradient_6.slot_5.keyIndex=1
gradient_7.isRange=0
gradient_7.speed=0
gradient_7.multiShadeEnabled=0
gradient_7.cycleEnabled=0
gradient_7.title=
gradient_7.size=3
gradient_7.slot_0.paletteIndex=6
gradient_7.slot_0.keyIndex=1
gradient_7.slot_1.paletteIndex=14
gradient_7.slot_1.keyIndex=1
gradient_7.slot_2.paletteIndex=1
gradient_7.slot_2.keyIndex=1
gradient_8.isRange=0
gradient_8.speed=0
gradient_8.multiShadeEnabled=0
gradient_8.cycleEnabled=0
gradient_8.title=
gradient_8.size=4
gradient_8.slot_0.paletteIndex=9
gradient_8.slot_0.keyIndex=1
gradient_8.slot_1.paletteIndex=8
gradient_8.slot_1.keyIndex=1
gradient_8.slot_2.paletteIndex=10
gradient_8.slot_2.keyIndex=1
gradient_8.slot_3.paletteIndex=7
gradient_8.slot_3.keyIndex=1
gradient_9.isRange=0
gradient_9.speed=25
gradient_9.multiShadeEnabled=0
gradient_9.cycleEnabled=0
gradient_9.title=
gradient_9.size=3
gradient_9.slot_0.paletteIndex=2
gradient_9.slot_0.keyIndex=1
gradient_9.slot_1.paletteIndex=10
gradient_9.slot_1.keyIndex=1
gradient_9.slot_2.paletteIndex=1
gradient_9.slot_2.keyIndex=1
gradient_10.isRange=0
gradient_10.speed=25
gradient_10.multiShadeEnabled=0
gradient_10.cycleEnabled=0
gradient_10.title=
gradient_10.size=4
gradient_10.slot_0.paletteIndex=11
gradient_10.slot_0.keyIndex=1
gradient_10.slot_1.paletteIndex=4
gradient_10.slot_1.keyIndex=1
gradient_10.slot_2.paletteIndex=10
gradient_10.slot_2.keyIndex=1
gradient_10.slot_3.paletteIndex=7
gradient_10.slot_3.keyIndex=1
colorConstraints.globalColors=11,15,16
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=1
colorConstraints.tileWidth=4
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=1
colorConstraints.maxPaletteEntry=16
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_8]
version=8
title=C64 - Multi Color Image
type=0
canvas.width=160
canvas.height=200
frameCount=1
colors.paletteFile=c64 pepto extended.pal
channel.red.bits=8
channel.green.bits=8
channel.blue.bits=8
channel.alpha.bits=8
transparency.mode=1
background.mode=5
background.colorIndex=0
drawingGrid.width=4
drawingGrid.height=8
drawingGrid.show=1
pixel.width=2
pixel.height=1
animation.fileType=sbmp
image.fileType=bmp
notes=The C64 Multi Color Image is a bitmap mode was initially intended to be used for still images, but based on some hardware tricks it is also possible to use it for ingame scrolling backgrounds.\n\nThe screen is divided into 4x8 pixel tiles where every pixes has a double width. So the overall resolution of a full screen is 160x200 pixels.\n\nEvery tile can use a background color which is the same for all tiles and other three colors from the 16 color palette.\n\nThe standard C64 color palette uses fixed 16 color entries you can choose from.\nThe color palette used in this preset contains duplicate entries of those colors to show different color arrangements that are typically used.\n\nIf you want to use the graphics in conjunction with an image converter software that only supports graphics that strictly use the first 16 colors then you can select the gradient "C64 standard palette range". Then use menu "Colors/Remap Colors/Frames(s) to Gradient" to remap all colors to the first 16 color entries in the palette.\n\nThe color constrains function helps you to identify pixels that exceed the limits. Use menu "Colors/Color Constraints/Check for Errors" to reveal invalid color combinations.\n\nFor more information see:\nhttps://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-c64.htm\n
gradient.count=11
gradient.selected=-1
gradient_0.isRange=1
gradient_0.speed=25
gradient_0.multiShadeEnabled=0
gradient_0.cycleEnabled=0
gradient_0.title=C64 standard palette range
gradient_0.rangeStart=0
gradient_0.rangeEnd=15
gradient_1.isRange=0
gradient_1.speed=0
gradient_1.multiShadeEnabled=0
gradient_1.cycleEnabled=0
gradient_1.title=
gradient_1.size=4
gradient_1.slot_0.paletteIndex=11
gradient_1.slot_0.keyIndex=1
gradient_1.slot_1.paletteIndex=12
gradient_1.slot_1.keyIndex=1
gradient_1.slot_2.paletteIndex=15
gradient_1.slot_2.keyIndex=1
gradient_1.slot_3.paletteIndex=1
gradient_1.slot_3.keyIndex=1
gradient_2.isRange=0
gradient_2.speed=25
gradient_2.multiShadeEnabled=0
gradient_2.cycleEnabled=0
gradient_2.title=
gradient_2.size=3
gradient_2.slot_0.paletteIndex=9
gradient_2.slot_0.keyIndex=1
gradient_2.slot_1.paletteIndex=12
gradient_2.slot_1.keyIndex=1
gradient_2.slot_2.paletteIndex=15
gradient_2.slot_2.keyIndex=1
gradient_3.isRange=0
gradient_3.speed=0
gradient_3.multiShadeEnabled=0
gradient_3.cycleEnabled=0
gradient_3.title=
gradient_3.size=4
gradient_3.slot_0.paletteIndex=9
gradient_3.slot_0.keyIndex=1
gradient_3.slot_1.paletteIndex=8
gradient_3.slot_1.keyIndex=1
gradient_3.slot_2.paletteIndex=5
gradient_3.slot_2.keyIndex=1
gradient_3.slot_3.paletteIndex=13
gradient_3.slot_3.keyIndex=1
gradient_4.isRange=0
gradient_4.speed=0
gradient_4.multiShadeEnabled=0
gradient_4.cycleEnabled=0
gradient_4.title=
gradient_4.size=3
gradient_4.slot_0.paletteIndex=5
gradient_4.slot_0.keyIndex=1
gradient_4.slot_1.paletteIndex=13
gradient_4.slot_1.keyIndex=1
gradient_4.slot_2.paletteIndex=1
gradient_4.slot_2.keyIndex=1
gradient_5.isRange=0
gradient_5.speed=25
gradient_5.multiShadeEnabled=0
gradient_5.cycleEnabled=0
gradient_5.title=
gradient_5.size=3
gradient_5.slot_0.paletteIndex=9
gradient_5.slot_0.keyIndex=1
gradient_5.slot_1.paletteIndex=5
gradient_5.slot_1.keyIndex=1
gradient_5.slot_2.paletteIndex=3
gradient_5.slot_2.keyIndex=1
gradient_6.isRange=0
gradient_6.speed=0
gradient_6.multiShadeEnabled=0
gradient_6.cycleEnabled=0
gradient_6.title=
gradient_6.size=6
gradient_6.slot_0.paletteIndex=6
gradient_6.slot_0.keyIndex=1
gradient_6.slot_1.paletteIndex=4
gradient_6.slot_1.keyIndex=1
gradient_6.slot_2.paletteIndex=14
gradient_6.slot_2.keyIndex=1
gradient_6.slot_3.paletteIndex=3
gradient_6.slot_3.keyIndex=1
gradient_6.slot_4.paletteIndex=13
gradient_6.slot_4.keyIndex=1
gradient_6.slot_5.paletteIndex=1
gradient_6.slot_5.keyIndex=1
gradient_7.isRange=0
gradient_7.speed=0
gradient_7.multiShadeEnabled=0
gradient_7.cycleEnabled=0
gradient_7.title=
gradient_7.size=3
gradient_7.slot_0.paletteIndex=6
gradient_7.slot_0.keyIndex=1
gradient_7.slot_1.paletteIndex=14
gradient_7.slot_1.keyIndex=1
gradient_7.slot_2.paletteIndex=1
gradient_7.slot_2.keyIndex=1
gradient_8.isRange=0
gradient_8.speed=0
gradient_8.multiShadeEnabled=0
gradient_8.cycleEnabled=0
gradient_8.title=
gradient_8.size=4
gradient_8.slot_0.paletteIndex=9
gradient_8.slot_0.keyIndex=1
gradient_8.slot_1.paletteIndex=8
gradient_8.slot_1.keyIndex=1
gradient_8.slot_2.paletteIndex=10
gradient_8.slot_2.keyIndex=1
gradient_8.slot_3.paletteIndex=7
gradient_8.slot_3.keyIndex=1
gradient_9.isRange=0
gradient_9.speed=25
gradient_9.multiShadeEnabled=0
gradient_9.cycleEnabled=0
gradient_9.title=
gradient_9.size=3
gradient_9.slot_0.paletteIndex=2
gradient_9.slot_0.keyIndex=1
gradient_9.slot_1.paletteIndex=10
gradient_9.slot_1.keyIndex=1
gradient_9.slot_2.paletteIndex=1
gradient_9.slot_2.keyIndex=1
gradient_10.isRange=0
gradient_10.speed=25
gradient_10.multiShadeEnabled=0
gradient_10.cycleEnabled=0
gradient_10.title=
gradient_10.size=4
gradient_10.slot_0.paletteIndex=11
gradient_10.slot_0.keyIndex=1
gradient_10.slot_1.paletteIndex=4
gradient_10.slot_1.keyIndex=1
gradient_10.slot_2.paletteIndex=10
gradient_10.slot_2.keyIndex=1
gradient_10.slot_3.paletteIndex=7
gradient_10.slot_3.keyIndex=1
colorConstraints.globalColors=0
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=1
colorConstraints.tileWidth=4
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=1
colorConstraints.maxPaletteEntry=15
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_9]
version=8
title=C64 - Multi Color Sprite
type=0
canvas.width=12
canvas.height=21
frameCount=1
colors.paletteFile=c64 pepto extended.pal
channel.red.bits=8
channel.green.bits=8
channel.blue.bits=8
channel.alpha.bits=8
transparency.mode=2
transparency.colorIndex=16
background.mode=1
drawingGrid.width=4
drawingGrid.height=8
drawingGrid.show=1
pixel.width=2
pixel.height=1
animation.fileType=sbmp
image.fileType=bmp
notes=C64 Multi Color Sprites have a size of 12 x 21 pixels. You can form larger objects by displaying sprites side by side programmatically.\n\nThe C64 limits the number of colors to be used in a multi color sprite to three plus transparency. To make it more difficult two of those three colors are defined globally and are used for all sprites.\nThat means that a single sprite can only have a single individual color.\n\nWith the C64 sprites transparent pixels are not defined as pixels using one of the 16 colors. Transparent pixels are just "empty" pixels. To address this the color 16 is used to define transparent pixels.\n\nThe color constrains function helps you to identify pixels that exceed the limits. Use menu "Colors/Color Constraints/Check for Errors" to reveal invalid color combinations.\n\nFor more information see:\nhttps://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-c64.htm\n
gradient.count=11
gradient.selected=-1
gradient_0.isRange=1
gradient_0.speed=25
gradient_0.multiShadeEnabled=0
gradient_0.cycleEnabled=0
gradient_0.title=C64 standard palette range
gradient_0.rangeStart=0
gradient_0.rangeEnd=15
gradient_1.isRange=0
gradient_1.speed=0
gradient_1.multiShadeEnabled=0
gradient_1.cycleEnabled=0
gradient_1.title=
gradient_1.size=4
gradient_1.slot_0.paletteIndex=11
gradient_1.slot_0.keyIndex=1
gradient_1.slot_1.paletteIndex=12
gradient_1.slot_1.keyIndex=1
gradient_1.slot_2.paletteIndex=15
gradient_1.slot_2.keyIndex=1
gradient_1.slot_3.paletteIndex=1
gradient_1.slot_3.keyIndex=1
gradient_2.isRange=0
gradient_2.speed=25
gradient_2.multiShadeEnabled=0
gradient_2.cycleEnabled=0
gradient_2.title=
gradient_2.size=3
gradient_2.slot_0.paletteIndex=9
gradient_2.slot_0.keyIndex=1
gradient_2.slot_1.paletteIndex=12
gradient_2.slot_1.keyIndex=1
gradient_2.slot_2.paletteIndex=15
gradient_2.slot_2.keyIndex=1
gradient_3.isRange=0
gradient_3.speed=0
gradient_3.multiShadeEnabled=0
gradient_3.cycleEnabled=0
gradient_3.title=
gradient_3.size=4
gradient_3.slot_0.paletteIndex=9
gradient_3.slot_0.keyIndex=1
gradient_3.slot_1.paletteIndex=8
gradient_3.slot_1.keyIndex=1
gradient_3.slot_2.paletteIndex=5
gradient_3.slot_2.keyIndex=1
gradient_3.slot_3.paletteIndex=13
gradient_3.slot_3.keyIndex=1
gradient_4.isRange=0
gradient_4.speed=0
gradient_4.multiShadeEnabled=0
gradient_4.cycleEnabled=0
gradient_4.title=
gradient_4.size=3
gradient_4.slot_0.paletteIndex=5
gradient_4.slot_0.keyIndex=1
gradient_4.slot_1.paletteIndex=13
gradient_4.slot_1.keyIndex=1
gradient_4.slot_2.paletteIndex=1
gradient_4.slot_2.keyIndex=1
gradient_5.isRange=0
gradient_5.speed=25
gradient_5.multiShadeEnabled=0
gradient_5.cycleEnabled=0
gradient_5.title=
gradient_5.size=3
gradient_5.slot_0.paletteIndex=9
gradient_5.slot_0.keyIndex=1
gradient_5.slot_1.paletteIndex=5
gradient_5.slot_1.keyIndex=1
gradient_5.slot_2.paletteIndex=3
gradient_5.slot_2.keyIndex=1
gradient_6.isRange=0
gradient_6.speed=0
gradient_6.multiShadeEnabled=0
gradient_6.cycleEnabled=0
gradient_6.title=
gradient_6.size=6
gradient_6.slot_0.paletteIndex=6
gradient_6.slot_0.keyIndex=1
gradient_6.slot_1.paletteIndex=4
gradient_6.slot_1.keyIndex=1
gradient_6.slot_2.paletteIndex=14
gradient_6.slot_2.keyIndex=1
gradient_6.slot_3.paletteIndex=3
gradient_6.slot_3.keyIndex=1
gradient_6.slot_4.paletteIndex=13
gradient_6.slot_4.keyIndex=1
gradient_6.slot_5.paletteIndex=1
gradient_6.slot_5.keyIndex=1
gradient_7.isRange=0
gradient_7.speed=0
gradient_7.multiShadeEnabled=0
gradient_7.cycleEnabled=0
gradient_7.title=
gradient_7.size=3
gradient_7.slot_0.paletteIndex=6
gradient_7.slot_0.keyIndex=1
gradient_7.slot_1.paletteIndex=14
gradient_7.slot_1.keyIndex=1
gradient_7.slot_2.paletteIndex=1
gradient_7.slot_2.keyIndex=1
gradient_8.isRange=0
gradient_8.speed=0
gradient_8.multiShadeEnabled=0
gradient_8.cycleEnabled=0
gradient_8.title=
gradient_8.size=4
gradient_8.slot_0.paletteIndex=9
gradient_8.slot_0.keyIndex=1
gradient_8.slot_1.paletteIndex=8
gradient_8.slot_1.keyIndex=1
gradient_8.slot_2.paletteIndex=10
gradient_8.slot_2.keyIndex=1
gradient_8.slot_3.paletteIndex=7
gradient_8.slot_3.keyIndex=1
gradient_9.isRange=0
gradient_9.speed=25
gradient_9.multiShadeEnabled=0
gradient_9.cycleEnabled=0
gradient_9.title=
gradient_9.size=3
gradient_9.slot_0.paletteIndex=2
gradient_9.slot_0.keyIndex=1
gradient_9.slot_1.paletteIndex=10
gradient_9.slot_1.keyIndex=1
gradient_9.slot_2.paletteIndex=1
gradient_9.slot_2.keyIndex=1
gradient_10.isRange=0
gradient_10.speed=25
gradient_10.multiShadeEnabled=0
gradient_10.cycleEnabled=0
gradient_10.title=
gradient_10.size=4
gradient_10.slot_0.paletteIndex=11
gradient_10.slot_0.keyIndex=1
gradient_10.slot_1.paletteIndex=4
gradient_10.slot_1.keyIndex=1
gradient_10.slot_2.paletteIndex=10
gradient_10.slot_2.keyIndex=1
gradient_10.slot_3.paletteIndex=7
gradient_10.slot_3.keyIndex=1
colorConstraints.globalColors=16
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=1
colorConstraints.tileWidth=12
colorConstraints.tileHeight=21
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=1
colorConstraints.maxPaletteEntry=16
colorConstraints.limitOverallColors=1
colorConstraints.overallColors=4

[preset_default_10]
version=8
title=C64 - Single Color Sprite
type=0
canvas.width=24
canvas.height=21
frameCount=1
colors.paletteFile=c64 pepto extended.pal
channel.red.bits=8
channel.green.bits=8
channel.blue.bits=8
channel.alpha.bits=8
transparency.mode=2
transparency.colorIndex=16
background.mode=1
animation.fileType=sbmp
image.fileType=bmp
notes=C64 Single Color Sprites have a size of 24 x 21 pixels. You can form larger objects by displaying sprites side by side programmatically.\n\nA sprite can have opaque pixels using a single color througout the sprite and transparent pixels\n\nWith the C64 sprites transparent pixels are not defined as pixels using one of the 16 colors. Transparent pixels are just "empty" pixels. To address this the color 16 is used to define transparent pixels.\n\nFor more information see:\nhttps://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-c64.htm\n
gradient.count=11
gradient.selected=-1
gradient_0.isRange=1
gradient_0.speed=25
gradient_0.multiShadeEnabled=0
gradient_0.cycleEnabled=0
gradient_0.title=C64 standard palette range
gradient_0.rangeStart=0
gradient_0.rangeEnd=15
gradient_1.isRange=0
gradient_1.speed=0
gradient_1.multiShadeEnabled=0
gradient_1.cycleEnabled=0
gradient_1.title=
gradient_1.size=4
gradient_1.slot_0.paletteIndex=11
gradient_1.slot_0.keyIndex=1
gradient_1.slot_1.paletteIndex=12
gradient_1.slot_1.keyIndex=1
gradient_1.slot_2.paletteIndex=15
gradient_1.slot_2.keyIndex=1
gradient_1.slot_3.paletteIndex=1
gradient_1.slot_3.keyIndex=1
gradient_2.isRange=0
gradient_2.speed=25
gradient_2.multiShadeEnabled=0
gradient_2.cycleEnabled=0
gradient_2.title=
gradient_2.size=3
gradient_2.slot_0.paletteIndex=9
gradient_2.slot_0.keyIndex=1
gradient_2.slot_1.paletteIndex=12
gradient_2.slot_1.keyIndex=1
gradient_2.slot_2.paletteIndex=15
gradient_2.slot_2.keyIndex=1
gradient_3.isRange=0
gradient_3.speed=0
gradient_3.multiShadeEnabled=0
gradient_3.cycleEnabled=0
gradient_3.title=
gradient_3.size=4
gradient_3.slot_0.paletteIndex=9
gradient_3.slot_0.keyIndex=1
gradient_3.slot_1.paletteIndex=8
gradient_3.slot_1.keyIndex=1
gradient_3.slot_2.paletteIndex=5
gradient_3.slot_2.keyIndex=1
gradient_3.slot_3.paletteIndex=13
gradient_3.slot_3.keyIndex=1
gradient_4.isRange=0
gradient_4.speed=0
gradient_4.multiShadeEnabled=0
gradient_4.cycleEnabled=0
gradient_4.title=
gradient_4.size=3
gradient_4.slot_0.paletteIndex=5
gradient_4.slot_0.keyIndex=1
gradient_4.slot_1.paletteIndex=13
gradient_4.slot_1.keyIndex=1
gradient_4.slot_2.paletteIndex=1
gradient_4.slot_2.keyIndex=1
gradient_5.isRange=0
gradient_5.speed=25
gradient_5.multiShadeEnabled=0
gradient_5.cycleEnabled=0
gradient_5.title=
gradient_5.size=3
gradient_5.slot_0.paletteIndex=9
gradient_5.slot_0.keyIndex=1
gradient_5.slot_1.paletteIndex=5
gradient_5.slot_1.keyIndex=1
gradient_5.slot_2.paletteIndex=3
gradient_5.slot_2.keyIndex=1
gradient_6.isRange=0
gradient_6.speed=0
gradient_6.multiShadeEnabled=0
gradient_6.cycleEnabled=0
gradient_6.title=
gradient_6.size=6
gradient_6.slot_0.paletteIndex=6
gradient_6.slot_0.keyIndex=1
gradient_6.slot_1.paletteIndex=4
gradient_6.slot_1.keyIndex=1
gradient_6.slot_2.paletteIndex=14
gradient_6.slot_2.keyIndex=1
gradient_6.slot_3.paletteIndex=3
gradient_6.slot_3.keyIndex=1
gradient_6.slot_4.paletteIndex=13
gradient_6.slot_4.keyIndex=1
gradient_6.slot_5.paletteIndex=1
gradient_6.slot_5.keyIndex=1
gradient_7.isRange=0
gradient_7.speed=0
gradient_7.multiShadeEnabled=0
gradient_7.cycleEnabled=0
gradient_7.title=
gradient_7.size=3
gradient_7.slot_0.paletteIndex=6
gradient_7.slot_0.keyIndex=1
gradient_7.slot_1.paletteIndex=14
gradient_7.slot_1.keyIndex=1
gradient_7.slot_2.paletteIndex=1
gradient_7.slot_2.keyIndex=1
gradient_8.isRange=0
gradient_8.speed=0
gradient_8.multiShadeEnabled=0
gradient_8.cycleEnabled=0
gradient_8.title=
gradient_8.size=4
gradient_8.slot_0.paletteIndex=9
gradient_8.slot_0.keyIndex=1
gradient_8.slot_1.paletteIndex=8
gradient_8.slot_1.keyIndex=1
gradient_8.slot_2.paletteIndex=10
gradient_8.slot_2.keyIndex=1
gradient_8.slot_3.paletteIndex=7
gradient_8.slot_3.keyIndex=1
gradient_9.isRange=0
gradient_9.speed=25
gradient_9.multiShadeEnabled=0
gradient_9.cycleEnabled=0
gradient_9.title=
gradient_9.size=3
gradient_9.slot_0.paletteIndex=2
gradient_9.slot_0.keyIndex=1
gradient_9.slot_1.paletteIndex=10
gradient_9.slot_1.keyIndex=1
gradient_9.slot_2.paletteIndex=1
gradient_9.slot_2.keyIndex=1
gradient_10.isRange=0
gradient_10.speed=25
gradient_10.multiShadeEnabled=0
gradient_10.cycleEnabled=0
gradient_10.title=
gradient_10.size=4
gradient_10.slot_0.paletteIndex=11
gradient_10.slot_0.keyIndex=1
gradient_10.slot_1.paletteIndex=4
gradient_10.slot_1.keyIndex=1
gradient_10.slot_2.paletteIndex=10
gradient_10.slot_2.keyIndex=1
gradient_10.slot_3.paletteIndex=7
gradient_10.slot_3.keyIndex=1
colorConstraints.globalColors=16
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=24
colorConstraints.tileHeight=21
colorConstraints.colorsPerTile=2
colorConstraints.limitMaxPaletteEntry=1
colorConstraints.maxPaletteEntry=16
colorConstraints.limitOverallColors=1
colorConstraints.overallColors=2

[preset_default_11]
version=8
title=Amiga AGA (Advanced Graphics Architecture) NTSC
type=0
canvas.width=320
canvas.height=200
colors.paletteFile=brilliance.pal
channel.red.bits=8
channel.green.bits=8
channel.blue.bits=8
channel.alpha.bits=8
background.mode=5
background.colorIndex=0
image.fileType=iff
notes=Standard game resolution: 320x200 (NTSC 60 FPS) or 320x256 (PAL 50 FPS),(often reduced to 288 pixels wide to provide the game more time to process sprites, color changes, object blitting etc.)\n\ncolor range: 16.7 million possible, 8 bits per color channel.Number of color indexes available: typically 16 or 32, but up to 256\nDual playfield mode (for layered scrolling) two separate palettes, 16 for the back layer and then 15 plus a transparent index for the front layer.\nSprites: 8 three color (plus a “clear” index for transparent pixels) sprites per scan line which can be all be set to be 16, 32, or 64 pixels wide (the width setting applies to all sprites), and as tall as the screen. 2 three color sprites can be combined to create a single 16 color sprite! This means you can have 4 sixteen color sprites or 2 sixteen color sprites and 4 three color sprites etc. You can have many more sprites than 8 on screen, but any more than 8 per scan line will result in sprites flickering (becoming invisible)\nNOTE: Most Amiga games use “blitter” objects instead of or in addition to sprites to allow for many more, larger, and more colorful objects on screen. Blitter objects draw right into the background so can only use the same color indexes as the background.  This means if you're using dual playfield mode for layered scrolling, blitter objects can only use the same 15 color indexes as the foreground play-field.NOTE 2: As an alternative to using the standard dual playfield mode with 15 and 16 colors respectively per layer, AGA Amigas were powerful enough to simulate 2 players with the blitter system. This could theoretically let you create games with much more colorful front layers and moving objects. Even the considerably weaker OCS Amigas could use this blitter approach to create action games with an 8 color back layer and a 32 color front layer. AGA Amiga's could likely double that color count. EXAMPLE: https://youtu.be/-owMNnyS7_U\n\nFor more information, click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-AmigaAGA.htm\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=0
colorConstraints.maxPaletteEntry=255
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_12]
version=8
title=Gameboy Color/GBA Tiled Graphics
type=1
canvas.width=20
canvas.height=18
tile.width=8
tile.height=8
tile.mirrorX=0
tile.mirrorY=0
tile.count=1024
channel.red.bits=5
channel.green.bits=5
channel.blue.bits=5
channel.alpha.bits=2
background.mode=5
background.colorIndex=0
drawingGrid.width=8
drawingGrid.height=8
drawingGrid.show=1
animation.fileType=sbmp
image.fileType=bmp
notes=Both the Game Boy Color and the Game Boy Advance supported a tiled graphics mode where each tile could use 4 colors per 8x8 pixel tile. Eace tile could pick from one of 8 four color palettes.\n\nThis information will be improved and updated at a later date.
colorConstraints.globalColors=
colorConstraints.useTilePalettes=1
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=1
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=1
colorConstraints.maxPaletteEntry=32
colorConstraints.limitOverallColors=1
colorConstraints.overallColors=32

[preset_default_13]
version=8
title=Neo Geo (Generic)
type=0
canvas.width=320
canvas.height=224
channel.red.bits=5
channel.green.bits=5
channel.blue.bits=5
channel.alpha.bits=2
background.mode=5
background.colorIndex=0
notes=IMPORTANT: Pro Motion plans to support NEO GEO's unique color cepth better in the future, for now we're limiting the color range to 5 bits per pixel, which should remap very well to the real color depth once that's supported.Standard game resolution: 320x224 but many games used 304x224\ncolor range: The NeoGeo uses 6 bits per color channel, where the lowest bit of each channel is shared with one bit, providing a palette of 65,536 colors. \n\nNumber of color indexes available: 4096 indexes used, broken into a whopping 256 sixteen color palettes. The first color index of each 16 color palette is always used for transparent.Background graphics color limitations:Amazingly, the Neo Geo Has no dedicated hardware for scrolling background layers. Instead, they made the sprites so powerful that you can (and must) use them backgrounds as well as for all the moving objects. Luckily, the Neo Geo can display so many sprites that you can create up to 3 layers of scrolling with Sprites and still have plenty left over for all your on screen moving characters.Lets do some quick math... The Neo Geo can display up to 1,536 pixels of sprite per scan-line and a full screen is only 320 pixels across... this means you can cover the entire screes width 4.8 entire times without a single sprite flickering or disappearing. \nBecause the backgrounds are made with sprites, they too can be scaled down to create a “camera panning back” effect you can find in many games such as Samurai Showdown and Last Blade. While the Neo Geo doesn't provide any scrolling background layers, (besides sprites) it does give you a “Fix layer” which is a non scrolling (and non-scaling ) graphics layer which uses 8x8 pixel 16 color tiles which can each use any of the first sixteen 16 color palettes. This “fix layer” can have up to 4,096 dedicated tiles. This layer is perfect for you games HUD or high score tables etc.\nSprites\nSprites: The NEO GEO can display 96 fifteen color (plus a “clear” index for transparent pixels) sprites per scan line (row of pixels on screen).  Each sprite can use any of the 256 sixteen color palettes, with the first color index of each 16 color palette being used for transparent pixels.\n\n380 sprites can be on screen in total, but any more than 96 sprites (or 1536 pixels ) per scan line will result in some sprites not being displayed. Each sprite is 16 pixels wide and can be from 16 to 512 pixels tall!\n\n1,048,576 16x16 pixel tiles can be addressed for sprites (20 bits, 128MiB of graphics), if more tiles are needed then the sprites graphics need to be bankswitched.Contrary to common belief sprites can't be zoomed, they can only be shrunk. Graphics for sprites therefore have to be drawn to the biggest size needed.\nA lot of games contain pre-stretched graphics for sprites which are seen scaled down most of the time ("crashing" logos in title screens for example).\n\nSprites can be horizontally or vertically flipped or both at the same time! For more detailed technical references:\n\n<http://furrtek.free.fr/noclass/neogeo/mvstech.txt>\n<https://wiki.neogeodev.org/index.php?title=Main_Page>\n\n\nSpecial thanks to the community and creators at: <http://www.neo-geo.com/forums/showthread.php?271249-Please-help-consolidate-all-info-for-pixel-artists-for-NeoGeo-dev>\n\nSpecific thanks to the following community members for helping to consolidate and clarify the information:\n\nsunder\nSpamYouToDeath\nPedrobear\nwyndcrosser\n\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=0
colorConstraints.maxPaletteEntry=255
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_14]
version=8
title=Nintendo Entertainment System (Generic)
type=0
canvas.width=256
canvas.height=240
colors.paletteFile=nintendo NES.pal
channel.red.bits=8
channel.green.bits=8
channel.blue.bits=8
channel.alpha.bits=8
background.mode=5
background.colorIndex=0
notes=Standard game resolution: 256x240 (typically on a TV only 224 pixels of screen height would show.)\ncolor range: there is a specific palette of 54 colors. When you choose the NES/Famicom project preset those 54 colors will be at the bottom of the color palette for you to easily copy colors from there to the first 32 indexes of the palette. You should only use the colors you copy from the bottom 54 colors into the top 32 color indexes, and be sure to follow the graphical limitations mentioned below.\n\nNumber of color indexes available: typically 32 indexes used, but many are used for transparent so can't be used as a display color. Explained in greater detail below.Background graphics color limitations:Background graphics are always made from 8x8 pixel tiles. The 16 color indexes reserved for the background must be broken into 4 palettes of 4 colors each, HOWEVER, the first color of each 4 color palette MUST be the same color. This is the “Background color”. This leaves 13 distinct colors total that can be used in your background graphics. Each tile MUST use colors from only one of these 4 color palettes AND although the tiles are 8x8 pixels, each block of 16x16 tiles MUST use the same 4 color palette! To recap, tiles are 8x8 BUT all tiles within a 16x16 grid MUST all share the same 4 color palette.All background tiles for any given level must fit into a single 128x128 pixel image containing 256 total 8x8 tiles.\n\nBackground tiles can NOT be flipped or rotated.\nSprites: The NES can display eight 8x8 pixel, 3 color (plus a “clear” index for transparent pixels) sprites per scan line (row of pixels on screen).  You can have 64 sprites on screen in total, but any more than 8 per scan line will result in sprites flickering (becoming invisible). Similarly to background graphics, the second set of 16 color indexes is used for the sprites and must be divided into 4 four color palettes BUT the first color in each palette will be used for transparent. This means the total colors available for sprites is 12, with any one sprite using 3 colors from one of the 4 color sprite palettes.You can choose a second sprite mode which switches all sprites to 8x16 pixels instead of 8x8 pixels (yes, you can still display 64 of these on screen even though they are twice as tall) BUT all sprites must be in the mode you choose (8x8 or 8x16). Similarly to the background graphics, all sprite graphics must be taken from a single 128x128 pixel images containing 256 8x8 pixel sprite “tiles”, or 128 8x16 pixel sprite “tiles” if you are using the second sprite mode for your sprites.Sprite “tile” images CAN be horizontally or vertically flipped! (but not rotated)IMPORTANT: You can actually use background tiles to represent objects in the game that can be interacted with! The best example is the many on screen coins in Super Mario 3. The NES would have absolutely no chance of putting that many sprites on screen, but luckily they didn't have to. They just used background tiles for the coins, and when Mario overlapped that screen location, the game would add a coin to Mario's coin count and replace the coin tile with a background graphic tile! The perfect crime! Clever game designers can use animated background tiles to create large enemies for the player to fight against with no sprite-flicker concerns.For more information, click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-NES.htm\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=0
colorConstraints.maxPaletteEntry=255
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_15]
version=8
title=Nintendo Entertainment System Tile Map
type=1
canvas.width=32
canvas.height=30
tile.width=8
tile.height=8
tile.mirrorX=0
tile.mirrorY=0
tile.count=1024
colors.paletteFile=nintendo NES.pal
channel.red.bits=8
channel.green.bits=8
channel.blue.bits=8
channel.alpha.bits=8
background.mode=5
background.colorIndex=0
drawingGrid.width=16
drawingGrid.height=16
drawingGrid.show=1
notes=Standard game resolution: 256x240 (typically on a TV only 224 pixels of screen height would show.)\ncolor range: there is a specific palette of 54 colors. When you choose the NES/Famicom project preset those 54 colors will be at the bottom of the color palette for you to easily copy colors from there to the first 32 indexes of the palette. You should only use the colors you copy from the bottom 54 colors into the top 32 color indexes, and be sure to follow the graphical limitations mentioned below.\n\nNumber of color indexes available: typically 32 indexes used, but many are used for transparent so can't be used as a display color. Explained in greater detail below.Background graphics color limitations:Background graphics are always made from 8x8 pixel tiles. The 16 color indexes reserved for the background must be broken into 4 palettes of 4 colors each, HOWEVER, the first color of each 4 color palette MUST be the same color. This is the “Background color”. This leaves 13 distinct colors total that can be used in your background graphics. Each tile MUST use colors from only one of these 4 color palettes AND although the tiles are 8x8 pixels, each block of 16x16 tiles MUST use the same 4 color palette! To recap, tiles are 8x8 BUT all tiles within a 16x16 grid MUST all share the same 4 color palette.All background tiles for any given level must fit into a single 128x128 pixel image containing 256 total 8x8 tiles.\n\nBackground tiles can NOT be flipped or rotated.\nSprites: The NES can display eight 8x8 pixel, 3 color (plus a “clear” index for transparent pixels) sprites per scan line (row of pixels on screen).  You can have 64 sprites on screen in total, but any more than 8 per scan line will result in sprites flickering (becoming invisible). Similarly to background graphics, the second set of 16 color indexes is used for the sprites and must be divided into 4 four color palettes BUT the first color in each palette will be used for transparent. This means the total colors available for sprites is 12, with any one sprite using 3 colors from one of the 4 color sprite palettes.You can choose a second sprite mode which switches all sprites to 8x16 pixels instead of 8x8 pixels (yes, you can still display 64 of these on screen even though they are twice as tall) BUT all sprites must be in the mode you choose (8x8 or 8x16). Similarly to the background graphics, all sprite graphics must be taken from a single 128x128 pixel images containing 256 8x8 pixel sprite “tiles”, or 128 8x16 pixel sprite “tiles” if you are using the second sprite mode for your sprites.Sprite “tile” images CAN be horizontally or vertically flipped! (but not rotated)IMPORTANT: You can actually use background tiles to represent objects in the game that can be interacted with! The best example is the many on screen coins in Super Mario 3. The NES would have absolutely no chance of putting that many sprites on screen, but luckily they didn't have to. They just used background tiles for the coins, and when Mario overlapped that screen location, the game would add a coin to Mario's coin count and replace the coin tile with a background graphic tile! The perfect crime! Clever game designers can use animated background tiles to create large enemies for the player to fight against with no sprite-flicker concerns.\n\nFor more information, click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-NES.htm\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=1
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=1
colorConstraints.tileWidth=16
colorConstraints.tileHeight=16
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=1
colorConstraints.maxPaletteEntry=32
colorConstraints.limitOverallColors=1
colorConstraints.overallColors=32

[preset_default_16]
version=8
title=PICO-8 animated Sprites/Tiles
type=0
canvas.width=8
canvas.height=8
frameCount=256
colors.paletteFile=pico-8 extended.pal
channel.red.bits=8
channel.green.bits=8
channel.blue.bits=8
channel.alpha.bits=8
transparency.mode=2
transparency.colorIndex=0
background.mode=3
animation.fileType=spng
image.fileType=png
notes=PICO-8 from https://www.lexaloffle.com/ is a virtual console that was developed for people having fun to create small games focused on game play and based on simple pixel graphics.\n\nWith PICO-8 a sprite is the same as a tile and has 8x8 pixels. Basically up to 128 tiles (or 256 if you don't use a tile map) can be stored in the graphic memory.\n\nEvery sprite can use the 16 colors from the fixed color palette.\nBy default color index 0 is used for transparent pixels but this can be changed programmatically.\n\nPICO-8 can load and save a PNG sprite sheet file of 128 x 128 which contains all sprites/tiles and the tile map.\nThe first half of 128x64 contains the sprites/tiles and they are placed side by side. The second half can contain either additional sprites/tiles or the tile map data.\nDo not change the second half data if you use the tile map feature in PICO-8, otherwise you might corrupt the tile map when importing the image back into PICO-8.\n\nTo enabled animation this project preset uses a frame size of 8x8 pixels and has 256 frames. Do not modify the frames 129 - 256 because they can contain your tile map data which should not be modified. Also you should not add/remove frames.\n\nBecause of the graphics being very tiny and PICO-8 displays everything zoomed anyway you should also increase the zoom value in the animation playback window.\n\nThe color palette is extended by some special color orders and groups to quickly select colors for certain graphic portions like stone, metal, plants etc..\n\nYou can define your own color groups in the palette area, but remember to never change the value of a color. Always use copies from the original color definitions.\nPICO-8 will remap every pixel to the standard palette when you load the graphics into it.\n\nFor more information see:\nhttps://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-PICO8.htm\n
gradient.count=11
gradient.selected=-1
gradient_0.isRange=1
gradient_0.speed=25
gradient_0.multiShadeEnabled=0
gradient_0.cycleEnabled=0
gradient_0.title=
gradient_0.rangeStart=32
gradient_0.rangeEnd=47
gradient_1.isRange=0
gradient_1.speed=25
gradient_1.multiShadeEnabled=0
gradient_1.cycleEnabled=0
gradient_1.title=
gradient_1.size=3
gradient_1.slot_0.paletteIndex=33
gradient_1.slot_0.keyIndex=1
gradient_1.slot_1.paletteIndex=34
gradient_1.slot_1.keyIndex=1
gradient_1.slot_2.paletteIndex=38
gradient_1.slot_2.keyIndex=1
gradient_2.isRange=0
gradient_2.speed=25
gradient_2.multiShadeEnabled=0
gradient_2.cycleEnabled=0
gradient_2.title=
gradient_2.size=3
gradient_2.slot_0.paletteIndex=38
gradient_2.slot_0.keyIndex=1
gradient_2.slot_1.paletteIndex=41
gradient_2.slot_1.keyIndex=1
gradient_2.slot_2.paletteIndex=45
gradient_2.slot_2.keyIndex=1
gradient_3.isRange=0
gradient_3.speed=25
gradient_3.multiShadeEnabled=0
gradient_3.cycleEnabled=0
gradient_3.title=
gradient_3.size=3
gradient_3.slot_0.paletteIndex=35
gradient_3.slot_0.keyIndex=1
gradient_3.slot_1.paletteIndex=38
gradient_3.slot_1.keyIndex=1
gradient_3.slot_2.paletteIndex=41
gradient_3.slot_2.keyIndex=1
gradient_4.isRange=0
gradient_4.speed=25
gradient_4.multiShadeEnabled=0
gradient_4.cycleEnabled=0
gradient_4.title=
gradient_4.size=3
gradient_4.slot_0.paletteIndex=34
gradient_4.slot_0.keyIndex=1
gradient_4.slot_1.paletteIndex=39
gradient_4.slot_1.keyIndex=1
gradient_4.slot_2.paletteIndex=45
gradient_4.slot_2.keyIndex=1
gradient_5.isRange=0
gradient_5.speed=25
gradient_5.multiShadeEnabled=0
gradient_5.cycleEnabled=0
gradient_5.title=
gradient_5.size=3
gradient_5.slot_0.paletteIndex=39
gradient_5.slot_0.keyIndex=1
gradient_5.slot_1.paletteIndex=41
gradient_5.slot_1.keyIndex=1
gradient_5.slot_2.paletteIndex=45
gradient_5.slot_2.keyIndex=1
gradient_6.isRange=0
gradient_6.speed=25
gradient_6.multiShadeEnabled=0
gradient_6.cycleEnabled=0
gradient_6.title=
gradient_6.size=3
gradient_6.slot_0.paletteIndex=37
gradient_6.slot_0.keyIndex=1
gradient_6.slot_1.paletteIndex=43
gradient_6.slot_1.keyIndex=1
gradient_6.slot_2.paletteIndex=46
gradient_6.slot_2.keyIndex=1
gradient_7.isRange=0
gradient_7.speed=25
gradient_7.multiShadeEnabled=0
gradient_7.cycleEnabled=0
gradient_7.title=
gradient_7.size=3
gradient_7.slot_0.paletteIndex=35
gradient_7.slot_0.keyIndex=1
gradient_7.slot_1.paletteIndex=44
gradient_7.slot_1.keyIndex=1
gradient_7.slot_2.paletteIndex=47
gradient_7.slot_2.keyIndex=1
gradient_8.isRange=0
gradient_8.speed=25
gradient_8.multiShadeEnabled=0
gradient_8.cycleEnabled=0
gradient_8.title=
gradient_8.size=3
gradient_8.slot_0.paletteIndex=36
gradient_8.slot_0.keyIndex=1
gradient_8.slot_1.paletteIndex=42
gradient_8.slot_1.keyIndex=1
gradient_8.slot_2.paletteIndex=46
gradient_8.slot_2.keyIndex=1
gradient_9.isRange=0
gradient_9.speed=25
gradient_9.multiShadeEnabled=0
gradient_9.cycleEnabled=0
gradient_9.title=
gradient_9.size=3
gradient_9.slot_0.paletteIndex=33
gradient_9.slot_0.keyIndex=1
gradient_9.slot_1.paletteIndex=40
gradient_9.slot_1.keyIndex=1
gradient_9.slot_2.paletteIndex=44
gradient_9.slot_2.keyIndex=1
gradient_10.isRange=0
gradient_10.speed=25
gradient_10.multiShadeEnabled=0
gradient_10.cycleEnabled=0
gradient_10.title=
gradient_10.size=3
gradient_10.slot_0.paletteIndex=33
gradient_10.slot_0.keyIndex=1
gradient_10.slot_1.paletteIndex=38
gradient_10.slot_1.keyIndex=1
gradient_10.slot_2.paletteIndex=44
gradient_10.slot_2.keyIndex=1
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=0
colorConstraints.maxPaletteEntry=255
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_17]
version=8
title=PICO-8 static Image
type=0
canvas.width=128
canvas.height=128
frameCount=1
colors.paletteFile=pico-8 extended.pal
channel.red.bits=8
channel.green.bits=8
channel.blue.bits=8
channel.alpha.bits=8
transparency.mode=2
transparency.colorIndex=0
background.mode=3
drawingGrid.width=8
drawingGrid.height=8
drawingGrid.show=1
image.fileType=png
notes=PICO-8 from https://www.lexaloffle.com/ is a virtual console that was developed for people having fun\nto create small games focused on game play and based on simple pixel graphics.\n\nWith PICO-8 a sprite is the same as a tile and has 8x8 pixels. Basically up to 128 tiles (or 256 if you don't use tile map) can be stored in the graphic memory.\n\nEvery tile can use the 16 colors from the fixed color palette.\nBy default color index 0 is used for transparent pixels but this can be changed programmatically.\n\nPICO-8 can load and save a PNG file of 128 x 128 which contains all sprites/tiles and the tile map.\nThe first half of 128x64 contains the sprites/tiles and they are placed side by side. The second half can contain either additional sprites/tiles or the tile map data.\nDo not change the second half data if you use the tile map feature in PICO-8, otherwise you might corrupt the tile map when importing the image back into PICO-8.\n\nSave the animation as PNG Sprite Sheet to load it directly into PICO-8.\n\nBecause of the graphics being very tiny and PICO-8 displays everything zoomed anyway you should also increase the zoom value in the animation playback window.\n\nThe color palette is extended by some special color orders and groups to quickly select colors for certain graphic portions like stone, metal, plants etc. .\nYou can define your own color groups in the palette area, but remember to never change the value of a color. Always use copies from the original color definitions.\nPICO-8 will remap every pixel to the standard palette when you load the graphics into it.\n\nFor more information see:\nhttps://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-PICO8.htm\n
gradient.count=11
gradient.selected=-1
gradient_0.isRange=1
gradient_0.speed=25
gradient_0.multiShadeEnabled=0
gradient_0.cycleEnabled=0
gradient_0.title=
gradient_0.rangeStart=32
gradient_0.rangeEnd=47
gradient_1.isRange=0
gradient_1.speed=25
gradient_1.multiShadeEnabled=0
gradient_1.cycleEnabled=0
gradient_1.title=
gradient_1.size=3
gradient_1.slot_0.paletteIndex=33
gradient_1.slot_0.keyIndex=1
gradient_1.slot_1.paletteIndex=34
gradient_1.slot_1.keyIndex=1
gradient_1.slot_2.paletteIndex=38
gradient_1.slot_2.keyIndex=1
gradient_2.isRange=0
gradient_2.speed=25
gradient_2.multiShadeEnabled=0
gradient_2.cycleEnabled=0
gradient_2.title=
gradient_2.size=3
gradient_2.slot_0.paletteIndex=38
gradient_2.slot_0.keyIndex=1
gradient_2.slot_1.paletteIndex=41
gradient_2.slot_1.keyIndex=1
gradient_2.slot_2.paletteIndex=45
gradient_2.slot_2.keyIndex=1
gradient_3.isRange=0
gradient_3.speed=25
gradient_3.multiShadeEnabled=0
gradient_3.cycleEnabled=0
gradient_3.title=
gradient_3.size=3
gradient_3.slot_0.paletteIndex=35
gradient_3.slot_0.keyIndex=1
gradient_3.slot_1.paletteIndex=38
gradient_3.slot_1.keyIndex=1
gradient_3.slot_2.paletteIndex=41
gradient_3.slot_2.keyIndex=1
gradient_4.isRange=0
gradient_4.speed=25
gradient_4.multiShadeEnabled=0
gradient_4.cycleEnabled=0
gradient_4.title=
gradient_4.size=3
gradient_4.slot_0.paletteIndex=34
gradient_4.slot_0.keyIndex=1
gradient_4.slot_1.paletteIndex=39
gradient_4.slot_1.keyIndex=1
gradient_4.slot_2.paletteIndex=45
gradient_4.slot_2.keyIndex=1
gradient_5.isRange=0
gradient_5.speed=25
gradient_5.multiShadeEnabled=0
gradient_5.cycleEnabled=0
gradient_5.title=
gradient_5.size=3
gradient_5.slot_0.paletteIndex=39
gradient_5.slot_0.keyIndex=1
gradient_5.slot_1.paletteIndex=41
gradient_5.slot_1.keyIndex=1
gradient_5.slot_2.paletteIndex=45
gradient_5.slot_2.keyIndex=1
gradient_6.isRange=0
gradient_6.speed=25
gradient_6.multiShadeEnabled=0
gradient_6.cycleEnabled=0
gradient_6.title=
gradient_6.size=3
gradient_6.slot_0.paletteIndex=37
gradient_6.slot_0.keyIndex=1
gradient_6.slot_1.paletteIndex=43
gradient_6.slot_1.keyIndex=1
gradient_6.slot_2.paletteIndex=46
gradient_6.slot_2.keyIndex=1
gradient_7.isRange=0
gradient_7.speed=25
gradient_7.multiShadeEnabled=0
gradient_7.cycleEnabled=0
gradient_7.title=
gradient_7.size=3
gradient_7.slot_0.paletteIndex=35
gradient_7.slot_0.keyIndex=1
gradient_7.slot_1.paletteIndex=44
gradient_7.slot_1.keyIndex=1
gradient_7.slot_2.paletteIndex=47
gradient_7.slot_2.keyIndex=1
gradient_8.isRange=0
gradient_8.speed=25
gradient_8.multiShadeEnabled=0
gradient_8.cycleEnabled=0
gradient_8.title=
gradient_8.size=3
gradient_8.slot_0.paletteIndex=36
gradient_8.slot_0.keyIndex=1
gradient_8.slot_1.paletteIndex=42
gradient_8.slot_1.keyIndex=1
gradient_8.slot_2.paletteIndex=46
gradient_8.slot_2.keyIndex=1
gradient_9.isRange=0
gradient_9.speed=25
gradient_9.multiShadeEnabled=0
gradient_9.cycleEnabled=0
gradient_9.title=
gradient_9.size=3
gradient_9.slot_0.paletteIndex=33
gradient_9.slot_0.keyIndex=1
gradient_9.slot_1.paletteIndex=40
gradient_9.slot_1.keyIndex=1
gradient_9.slot_2.paletteIndex=44
gradient_9.slot_2.keyIndex=1
gradient_10.isRange=0
gradient_10.speed=25
gradient_10.multiShadeEnabled=0
gradient_10.cycleEnabled=0
gradient_10.title=
gradient_10.size=3
gradient_10.slot_0.paletteIndex=33
gradient_10.slot_0.keyIndex=1
gradient_10.slot_1.paletteIndex=38
gradient_10.slot_1.keyIndex=1
gradient_10.slot_2.paletteIndex=44
gradient_10.slot_2.keyIndex=1
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=0
colorConstraints.maxPaletteEntry=255
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_18]
version=8
title=Sega Master System (Generic)
type=0
canvas.width=256
canvas.height=192
colors.paletteFile=Sega Master System.pal
channel.red.bits=8
channel.green.bits=8
channel.blue.bits=8
channel.alpha.bits=8
background.mode=5
background.colorIndex=0
notes=Standard game resolution: 256x192 (NTSC 60 FPS) or 256x224 (PAL 50 FPS)\ncolor range: The SMS uses 2 bits per color channel, providing a palette of 64 colors. When you choose the NES/Famicom project preset those 64 colors will be at the bottom of the color palette for you to easily copy colors from there to the first 32 indexes of the palette. You should only use the colors you copy from the bottom 64 colors into the top 32 color indexes, and be sure to follow the graphical limitations mentioned below.\n\nNumber of color indexes available: typically 32 indexes used, but many are used for transparent so can't be used as a display color. Explained in greater detail below.Background graphics color limitations:Background graphics are always made from 8x8 pixel tiles. Every single tile can use any or all of the 16 colors from EITHER the 16 colors reserved for background graphics OR the 16 colors reserved for sprites! To clarify, each tile can use either color indexes 0 through 15 or color indexes 16 through 31. By default indexes 0 through 15 are for backgrounds and sprites can ONLY USE indexes  16 through 31.488 unique tiles can be used. Up to 1,792 horizontally or vertically flipped tiles possible in vram.\n\nBackground tiles CAN be flipped horizontally or vertically OR BOTH at the same time! You can also draw one tile image directly on top of another in the same tile location. Clever SMS developers used this method to put very large moving characters on screen with no flicker! Using tiles drawn over background tiles instead of sprites for the games players, enemies etc. See the SMS longplay of Golden Axe: <https://www.youtube.com/watch?v=OHbJLhumzUs>You might notice, while allowing this 8 bit system to have many large moving objects on screen, the obvious trade off is that every character or object made from tile drawing instead of sprites is forced to move in 8x8 tile increments instead of smoothly per pixel.\n\nEach background tile can be set to display either behind or in front of the sprites!Sprites: The SMS can display eight 8x8 pixel, 15 color (plus a “clear” index for transparent pixels) sprites per scan line (row of pixels on screen).  You can have 64 sprites on screen in total, but any more than 8 per scan line will result in sprites flickering (becoming invisible). Sprites mist always use color indexes 16 through 31, with index 16 being used for transparent pixels.You can choose a second sprite mode which switches all sprites to 8x16 pixels instead of 8x8 pixels (yes, you can still display 64 of these on screen even though they are twice as tall) BUT all sprites must be in the mode you choose (8x8 or 8x16). The sega master system offers another awesome feature which allows you to set all sprites to “zoom mode”. This doubles the horizontal and vertical pixel size,making them blocky, but also now 16x16 and 16x32 pixels in size on-screen. Like picking 8x16 sprite mode, if you turn on zoom mode, then ALL sprites will be zoomed.Sprites can choose their image “tile” from either the 256 tile set or the 192 tile set.Sprite “tile” images CAN NOT be horizontally or vertically flipped or rotated! IMPORTANT: You can actually use background tiles to represent objects in the game that can be interacted with! The SMS has an awesome feature which lets you draw 2 tile images (on on top of the other) in a single tile space on-screen! This means you can draw tile-made enemies, coins, effects or other details on top of any actual background graphic! Clever game designers can use animated background tiles to create large enemies for the player to fight against with no sprite-flicker concerns.For more detailed technical references: <http://www.smspower.org/Development/SMSOfficalDocs>\nhttp://www.smspower.org/Development/Index\n\nFor more information, click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-SMS.htm\n\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=0
colorConstraints.maxPaletteEntry=255
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_19]
version=8
title=Sega Master System TileMap
type=1
canvas.width=32
canvas.height=24
tile.width=6
tile.height=6
tile.mirrorX=1
tile.mirrorY=1
tile.count=1024
colors.paletteFile=Sega Master System.pal
channel.red.bits=8
channel.green.bits=8
channel.blue.bits=8
channel.alpha.bits=8
background.mode=5
background.colorIndex=0
drawingGrid.width=8
drawingGrid.height=8
drawingGrid.show=1
notes=Standard game resolution: 256x192 (NTSC 60 FPS) or 256x224 (PAL 50 FPS)\ncolor range: The SMS uses 2 bits per color channel, providing a palette of 64 colors. When you choose the NES/Famicom project preset those 64 colors will be at the bottom of the color palette for you to easily copy colors from there to the first 32 indexes of the palette. You should only use the colors you copy from the bottom 64 colors into the top 32 color indexes, and be sure to follow the graphical limitations mentioned below.\n\nNumber of color indexes available: typically 32 indexes used, but many are used for transparent so can't be used as a display color. Explained in greater detail below.Background graphics color limitations:Background graphics are always made from 8x8 pixel tiles. Every single tile can use any or all of the 16 colors from EITHER the 16 colors reserved for background graphics OR the 16 colors reserved for sprites! To clarify, each tile can use either color indexes 0 through 15 or color indexes 16 through 31. By default indexes 0 through 15 are for backgrounds and sprites can ONLY USE indexes  16 through 31.488 unique tiles can be used. Up to 1,792 horizontally or vertically flipped tiles possible in vram.\n\nBackground tiles CAN be flipped horizontally or vertically OR BOTH at the same time! You can also draw one tile image directly on top of another in the same tile location. Clever SMS developers used this method to put very large moving characters on screen with no flicker! Using tiles drawn over background tiles instead of sprites for the games players, enemies etc. See the SMS longplay of Golden Axe: <https://www.youtube.com/watch?v=OHbJLhumzUs>You might notice, while allowing this 8 bit system to have many large moving objects on screen, the obvious trade off is that every character or object made from tile drawing instead of sprites is forced to move in 8x8 tile increments instead of smoothly per pixel.\n\nEach background tile can be set to display either behind or in front of the sprites!Sprites: The SMS can display eight 8x8 pixel, 15 color (plus a “clear” index for transparent pixels) sprites per scan line (row of pixels on screen).  You can have 64 sprites on screen in total, but any more than 8 per scan line will result in sprites flickering (becoming invisible). Sprites mist always use color indexes 16 through 31, with index 16 being used for transparent pixels.You can choose a second sprite mode which switches all sprites to 8x16 pixels instead of 8x8 pixels (yes, you can still display 64 of these on screen even though they are twice as tall) BUT all sprites must be in the mode you choose (8x8 or 8x16). The sega master system offers another awesome feature which allows you to set all sprites to “zoom mode”. This doubles the horizontal and vertical pixel size,making them blocky, but also now 16x16 and 16x32 pixels in size on-screen. Like picking 8x16 sprite mode, if you turn on zoom mode, then ALL sprites will be zoomed.Sprites can choose their image “tile” from either the 256 tile set or the 192 tile set.Sprite “tile” images CAN NOT be horizontally or vertically flipped or rotated! IMPORTANT: You can actually use background tiles to represent objects in the game that can be interacted with! The SMS has an awesome feature which lets you draw 2 tile images (on on top of the other) in a single tile space on-screen! This means you can draw tile-made enemies, coins, effects or other details on top of any actual background graphic! Clever game designers can use animated background tiles to create large enemies for the player to fight against with no sprite-flicker concerns.For more detailed technical references: <http://www.smspower.org/Development/SMSOfficalDocs>\nhttp://www.smspower.org/Development/Index\n\nFor more information, click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-SMS.htm\n\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=1
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=1
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=16
colorConstraints.limitMaxPaletteEntry=1
colorConstraints.maxPaletteEntry=32
colorConstraints.limitOverallColors=1
colorConstraints.overallColors=32

[preset_default_20]
version=8
title=Sega Megadrive/Genesis (Generic)
type=0
canvas.width=320
canvas.height=224
frameCount=1
colors.paletteFile=rainbow333.pal
channel.red.bits=3
channel.green.bits=3
channel.blue.bits=3
channel.alpha.bits=2
background.mode=5
background.colorIndex=0
notes=Standard game resolution: 320x224 or 256x224\ncolor range: The Megadrive uses 3 bits per color channel, providing a palette of 512 colors. \n\nNumber of color indexes available: Typically 64 indexes used, broken into four 16 color palettes. The first color index of each 16 color palette is always used for transparent.Background graphics color limitations:The Megadrive allows for 2 scrolling layers, 1 sprite layer, and one non scrolling “window” layer typically used for the games HUD (life bars, score etc.). Each scrolling layer is made of 8x8 pixel tiles. Each tile can be 16 colors, using one of any of the 4 available 16 color palettes.Unlike 8 bit consoles, there is not a fixed number of unique tiles that can be used, as you can store tile images in any part of available vram.\nThe number of background tiles can range from 64 to 1808 tiles\n\nBackground tiles CAN be flipped horizontally or vertically OR BOTH at the same time! On top of the 2 separate background layers, either of them can be individually sliced horizontally in order to add even more parts of the background scrolling at separate speeds to create the illusion or dept in scrolling games.\nSprites\nSprites: The Megadrive can display 20 fifteen color (plus a “clear” index for transparent pixels) sprites per scan line (row of pixels on screen).  Each sprite can use any of the four 16 color palettes, with the first color index of each 16 color palette being used for transparent pixels.\n\n80 sprites on screen in total, but any more than 20 per scan line will result in some sprites not being displayed. Each sprite can be set to any combination of the following dimensions for either width and height separately: 8,16,24 and 32 pixels, resulting in 16 different possible sprite sizes. Each sprite can be set to its own dimensions (from these options) regardless of the size settings for the other sprites. Making the sprites larger than 8x8 does not reduce the possible number of on-screen sprites or number of sprites per scan line BUT once 320 pixels of sprite data are drawn per scan line, no more sprites will be drawn on that scan line.\n\nUp to 1280 tiles can be dedicated to sprites, separate from the background tiles.Sprites can be horizontally or vertically flipped or both at the same time!For more detailed technical references:\n<http://md.squee.co/VDP>\n<https://emudocs.org/Genesis/Graphics/genvdp.txt>\nhttp://www.genny4ever.net/index.php?page=docs\n<http://segaretro.org/Sega_Mega_Drive>\n<https://wiki.megadrive.org/index.php?title=Main_Page>\n\nSpecial thanks to the community and creators of http://gendev.spritesmind.net/forum/viewtopic.php?f=2&t=2629\n\nFor more information, click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-Megadrive.htm\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=0
colorConstraints.maxPaletteEntry=255
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_21]
version=8
title=Sega Megadrive/Genesis TileMap
type=1
canvas.width=40
canvas.height=28
frameCount=1
tile.width=8
tile.height=8
tile.mirrorX=1
tile.mirrorY=1
tile.count=1024
colors.paletteFile=rainbow333.pal
channel.red.bits=3
channel.green.bits=3
channel.blue.bits=3
channel.alpha.bits=2
background.mode=5
background.colorIndex=0
drawingGrid.width=8
drawingGrid.height=8
drawingGrid.show=1
notes=Standard game resolution: 320x224 or 256x224\ncolor range: The Megadrive uses 3 bits per color channel, providing a palette of 512 colors. \n\nNumber of color indexes available: Typically 64 indexes used, broken into four 16 color palettes. The first color index of each 16 color palette is always used for transparent.Background graphics color limitations:The Megadrive allows for 2 scrolling layers, 1 sprite layer, and one non scrolling “window” layer typically used for the games HUD (life bars, score etc.). Each scrolling layer is made of 8x8 pixel tiles. Each tile can be 16 colors, using one of any of the 4 available 16 color palettes.Unlike 8 bit consoles, there is not a fixed number of unique tiles that can be used, as you can store tile images in any part of available vram.\nThe number of background tiles can range from 64 to 1808 tiles\n\nBackground tiles CAN be flipped horizontally or vertically OR BOTH at the same time! On top of the 2 separate background layers, either of them can be individually sliced horizontally in order to add even more parts of the background scrolling at separate speeds to create the illusion or dept in scrolling games.\nSprites\nSprites: The Megadrive can display 20 fifteen color (plus a “clear” index for transparent pixels) sprites per scan line (row of pixels on screen).  Each sprite can use any of the four 16 color palettes, with the first color index of each 16 color palette being used for transparent pixels.\n\n80 sprites on screen in total, but any more than 20 per scan line will result in some sprites not being displayed. Each sprite can be set to any combination of the following dimensions for either width and height separately: 8,16,24 and 32 pixels, resulting in 16 different possible sprite sizes. Each sprite can be set to its own dimensions (from these options) regardless of the size settings for the other sprites. Making the sprites larger than 8x8 does not reduce the possible number of on-screen sprites or number of sprites per scan line BUT once 320 pixels of sprite data are drawn per scan line, no more sprites will be drawn on that scan line.\n\nUp to 1280 tiles can be dedicated to sprites, separate from the background tiles.Sprites can be horizontally or vertically flipped or both at the same time!For more detailed technical references:\n<http://md.squee.co/VDP>\n<https://emudocs.org/Genesis/Graphics/genvdp.txt>\nhttp://www.genny4ever.net/index.php?page=docs\n<http://segaretro.org/Sega_Mega_Drive>\n<https://wiki.megadrive.org/index.php?title=Main_Page>\n\nFor more information, click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-Megadrive.htm\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=1
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=1
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=16
colorConstraints.limitMaxPaletteEntry=1
colorConstraints.maxPaletteEntry=64
colorConstraints.limitOverallColors=1
colorConstraints.overallColors=64

[preset_default_22]
version=8
title=Super NES (Generic)
type=0
canvas.width=256
canvas.height=224
frameCount=1
colors.paletteFile=brilliance.pal
channel.red.bits=5
channel.green.bits=5
channel.blue.bits=5
channel.alpha.bits=2
background.mode=5
background.colorIndex=0
image.fileType=png
notes=Important: The SNES stretched its 256 pixel wide screen image horizontally, resulting in pixels which were wider than they are tall (not perfect squares). As almost all monitors these days use pixels which are very close to perfect squares, your artwork and the entire width of the screen will be wider running on the actual hardware or an emulator which compensates for this pixel aspect ratio difference. You can temporarily stretch your image from 256 pixels wide to 298 pixels  wide to preview how your art will look once its showing on an actual SNES.\nMost games were 256x224 (NTSC)  The PAL versions of most popular games did not put use to the extra resolution so often just had a larger black bar at the bottom of the screen, nor did they compensate for the 10 FPS slow-down so the games actually ran noticeably slower. For these reasons, most emulators and re-releases of classic SNES games use the NTSC versions of the games.\n\nHigher resolutions up to 512x448 (512x478 for PAL) were possible but since higher resolutions caused “interlace flicker”, and/or had increased limitations on layers and colors (due to memory bandwidth constraints); the higher resolutions were used for less movement and animation-intensive games, in-game menus, text, and high resolution images. \ncolor range: The SNES uses 5 bits per color channel, providing a palette of 32,768 colors. \n\nNumber of color indexes available: 256, but many more on-screen colors were possible via color arithmetic for translucency effects. The three formulas for color overlay effects are additive, subtraction and average.Background graphics color limitations: There are 8 separate modes the SNES can use which offer very different and often complicated combinations of abilities and limitations. I'll only be covering the two most common and useful modes when the goal is multi-layered scrolling games.\nMODE 1 allows for 3 scrolling layers, where 2 layers allow 15 colors (plus transparent) per tile and the third layer is three colors plus transparent per tile. Every tile in each of the two 16 (15 and transparent) color per tile layers can pick from any of the eight 16 color palettes reserved for backgrounds, where palette 0 is color indexes 0 through 15, palette 1 is color indexes 16 through 31 and so forth.The 4 color (3 plus transparent) per tile layer allows each of its tiles to pick from eight 4 index sub-sets of the first 2 16 color palettes... so, the first 4 color subset would be indexes 0 through 3, the second subset would be indexes 4 through 7. In these two examples, color index 0 and color index 4 are transparent.MODE 3 allows for 2 layers of scrolling, where one layer is 15 colors (plus transparent) per tile and the other layer allows for each tile to use the entire range of 256 colors! (255 plus transparent) This mode is often used for title-screens. Keep in mind the cost of having each 8x8 tile being 256 color, it will eat up Vram much faster than 16 color or 4 color tiles, and a background later using 16 color tiles which can each use any of 8 total 16 color palettes means you can easily make 120 color layers at a far smaller cost, and this is before any use of the translucent color blend modes or other available very low-”cost” tricks to increase the number of on-screen colors. This is why most games use mode 1 over mode 3 for actual in-game levels. Also keep in mind, in mode 3, the second set of 128 colors (color indexes) are shared between the 256 color background layer and the sprites.\nFor more info click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-SNES.htm\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=0
colorConstraints.maxPaletteEntry=255
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_23]
version=8
title=Super NES 16 Color Tiles Tile Map
type=1
canvas.width=256
canvas.height=224
frameCount=1
tile.width=8
tile.height=8
tile.mirrorX=1
tile.mirrorY=1
tile.count=1024
colors.paletteFile=brilliance.pal
channel.red.bits=5
channel.green.bits=5
channel.blue.bits=5
channel.alpha.bits=2
background.mode=5
background.colorIndex=0
drawingGrid.width=8
drawingGrid.height=8
drawingGrid.show=1
image.fileType=png
notes=Important: The SNES stretched its 256 pixel wide screen image horizontally, resulting in pixels which were wider than they are tall (not perfect squares). As almost all monitors these days use pixels which are very close to perfect squares, your artwork and the entire width of the screen will be wider running on the actual hardware or an emulator which compensates for this pixel aspect ratio difference. You can temporarily stretch your image from 256 pixels wide to 298 pixels  wide to preview how your art will look once its showing on an actual SNES.\nMost games were 256x224 (NTSC)  The PAL versions of most popular games did not put use to the extra resolution so often just had a larger black bar at the bottom of the screen, nor did they compensate for the 10 FPS slow-down so the games actually ran noticeably slower. For these reasons, most emulators and re-releases of classic SNES games use the NTSC versions of the games.\n\nHigher resolutions up to 512x448 (512x478 for PAL) were possible but since higher resolutions caused “interlace flicker”, and/or had increased limitations on layers and colors (due to memory bandwidth constraints); the higher resolutions were used for less movement and animation-intensive games, in-game menus, text, and high resolution images. \ncolor range: The SNES uses 5 bits per color channel, providing a palette of 32,768 colors. \n\nNumber of color indexes available: 256, but many more on-screen colors were possible via color arithmetic for translucency effects. The three formulas for color overlay effects are additive, subtraction and average.Background graphics color limitations: There are 8 separate modes the SNES can use which offer very different and often complicated combinations of abilities and limitations. I'll only be covering the two most common and useful modes when the goal is multi-layered scrolling games.\nMODE 1 allows for 3 scrolling layers, where 2 layers allow 15 colors (plus transparent) per tile and the third layer is three colors plus transparent per tile. Every tile in each of the two 16 (15 and transparent) color per tile layers can pick from any of the eight 16 color palettes reserved for backgrounds, where palette 0 is color indexes 0 through 15, palette 1 is color indexes 16 through 31 and so forth.The 4 color (3 plus transparent) per tile layer allows each of its tiles to pick from eight 4 index sub-sets of the first 2 16 color palettes... so, the first 4 color subset would be indexes 0 through 3, the second subset would be indexes 4 through 7. In these two examples, color index 0 and color index 4 are transparent.MODE 3 allows for 2 layers of scrolling, where one layer is 15 colors (plus transparent) per tile and the other layer allows for each tile to use the entire range of 256 colors! (255 plus transparent) This mode is often used for title-screens. Keep in mind the cost of having each 8x8 tile being 256 color, it will eat up Vram much faster than 16 color or 4 color tiles, and a background later using 16 color tiles which can each use any of 8 total 16 color palettes means you can easily make 120 color layers at a far smaller cost, and this is before any use of the translucent color blend modes or other available very low-”cost” tricks to increase the number of on-screen colors. This is why most games use mode 1 over mode 3 for actual in-game levels. Also keep in mind, in mode 3, the second set of 128 colors (color indexes) are shared between the 256 color background layer and the sprites.\nFor more info click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-SNES.htm\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=1
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=1
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=16
colorConstraints.limitMaxPaletteEntry=1
colorConstraints.maxPaletteEntry=128
colorConstraints.limitOverallColors=1
colorConstraints.overallColors=128

[preset_default_24]
version=8
title=Super NES 4 Color Tiles Tile Map
type=1
canvas.width=256
canvas.height=224
frameCount=1
tile.width=8
tile.height=8
tile.mirrorX=1
tile.mirrorY=1
tile.count=1024
colors.paletteFile=brilliance.pal
channel.red.bits=5
channel.green.bits=5
channel.blue.bits=5
channel.alpha.bits=2
background.mode=5
background.colorIndex=0
drawingGrid.width=8
drawingGrid.height=8
drawingGrid.show=1
image.fileType=png
notes=Important: The SNES stretched its 256 pixel wide screen image horizontally, resulting in pixels which were wider than they are tall (not perfect squares). As almost all monitors these days use pixels which are very close to perfect squares, your artwork and the entire width of the screen will be wider running on the actual hardware or an emulator which compensates for this pixel aspect ratio difference. You can temporarily stretch your image from 256 pixels wide to 298 pixels  wide to preview how your art will look once its showing on an actual SNES.\nMost games were 256x224 (NTSC)  The PAL versions of most popular games did not put use to the extra resolution so often just had a larger black bar at the bottom of the screen, nor did they compensate for the 10 FPS slow-down so the games actually ran noticeably slower. For these reasons, most emulators and re-releases of classic SNES games use the NTSC versions of the games.\n\nHigher resolutions up to 512x448 (512x478 for PAL) were possible but since higher resolutions caused “interlace flicker”, and/or had increased limitations on layers and colors (due to memory bandwidth constraints); the higher resolutions were used for less movement and animation-intensive games, in-game menus, text, and high resolution images. \ncolor range: The SNES uses 5 bits per color channel, providing a palette of 32,768 colors. \n\nNumber of color indexes available: 256, but many more on-screen colors were possible via color arithmetic for translucency effects. The three formulas for color overlay effects are additive, subtraction and average.Background graphics color limitations: There are 8 separate modes the SNES can use which offer very different and often complicated combinations of abilities and limitations. I'll only be covering the two most common and useful modes when the goal is multi-layered scrolling games.\nMODE 1 allows for 3 scrolling layers, where 2 layers allow 15 colors (plus transparent) per tile and the third layer is three colors plus transparent per tile. Every tile in each of the two 16 (15 and transparent) color per tile layers can pick from any of the eight 16 color palettes reserved for backgrounds, where palette 0 is color indexes 0 through 15, palette 1 is color indexes 16 through 31 and so forth.The 4 color (3 plus transparent) per tile layer allows each of its tiles to pick from eight 4 index sub-sets of the first 2 16 color palettes... so, the first 4 color subset would be indexes 0 through 3, the second subset would be indexes 4 through 7. In these two examples, color index 0 and color index 4 are transparent.MODE 3 allows for 2 layers of scrolling, where one layer is 15 colors (plus transparent) per tile and the other layer allows for each tile to use the entire range of 256 colors! (255 plus transparent) This mode is often used for title-screens. Keep in mind the cost of having each 8x8 tile being 256 color, it will eat up Vram much faster than 16 color or 4 color tiles, and a background later using 16 color tiles which can each use any of 8 total 16 color palettes means you can easily make 120 color layers at a far smaller cost, and this is before any use of the translucent color blend modes or other available very low-”cost” tricks to increase the number of on-screen colors. This is why most games use mode 1 over mode 3 for actual in-game levels. Also keep in mind, in mode 3, the second set of 128 colors (color indexes) are shared between the 256 color background layer and the sprites.\nFor more info click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-SNES.htm\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=1
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=1
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=1
colorConstraints.maxPaletteEntry=32
colorConstraints.limitOverallColors=1
colorConstraints.overallColors=32

[preset_default_25]
version=8
title=TurboGrafx-16 (Generic)
type=0
canvas.width=256
canvas.height=239
colors.paletteFile=rainbow333.pal
channel.red.bits=3
channel.green.bits=3
channel.blue.bits=3
channel.alpha.bits=2
background.mode=5
background.colorIndex=0
image.fileType=png
notes=Standard game resolution: The majority of games ran at 256x239. 352 and even 512 display width resolutions were possible, but very few games used those higher resolutions due to their hit on performance.\ncolor range: The PC-Engine (Turbographics 16) uses 3 bits per color channel, providing a palette of 512 colors. \nNumber of color indexes available: 512 indexes used, 241 dedicated to background art and 241 indexes dedicated to sprites! That's SIXTEEN 16 color palettes EACH for backgrounds and sprites with the first color index of each palette being used for transparent pixels.Background graphics color limitations:Background graphics are always made from 8x8 pixel tiles. Every single tile can use any or all of the 16 colors from any of the sixteen 16 color palettes reserved for background graphics! 256 unique tiles can be used.\n\nBackground tiles CAN NOT be flipped horizontally or vertically. \nEach background tile can be set to display either behind or in front of the sprites!Sprites: The PC-Engine/TG-16 can display 16 fifteen  color (plus a “clear” index for transparent pixels) sprites per scan line (row of pixels on screen).  You can have 64 sprites on screen in total, but any more than 16 per scan line will result in sprites flickering (becoming invisible). Each sprite can use any of the 16 sixteen color palettes available for sprites/You can individually set any sprite to be any of the following sizes: 16x16,16x32,16x64,32x16,32x32,32x64 Sprites CAN BE horizontally or vertically flipped !For more detailed technical references: https://www.zophar.net/fileuploads/2/10722gcgca/vdcdox.txt\n<http://archaicpixels.com/Main_Page>\n\nFor more info click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-TurboGrafx16.htm\n\n\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=0
colorConstraints.maxPaletteEntry=255
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

[preset_default_26]
version=8
title=TurboGrafx-16 Tile Map
type=1
canvas.width=32
canvas.height=30
tile.width=8
tile.height=8
tile.mirrorX=0
tile.mirrorY=0
tile.count=256
colors.paletteFile=rainbow333.pal
channel.red.bits=3
channel.green.bits=3
channel.blue.bits=3
channel.alpha.bits=2
background.mode=5
background.colorIndex=0
drawingGrid.width=8
drawingGrid.height=8
drawingGrid.show=1
image.fileType=png
notes=Standard game resolution: The majority of games ran at 256x239. 352 and even 512 display width resolutions were possible, but very few games used those higher resolutions due to their hit on performance.\ncolor range: The PC-Engine (Turbographics 16) uses 3 bits per color channel, providing a palette of 512 colors. \nNumber of color indexes available: 512 indexes used, 241 dedicated to background art and 241 indexes dedicated to sprites! That's SIXTEEN 16 color palettes EACH for backgrounds and sprites with the first color index of each palette being used for transparent pixels.Background graphics color limitations:Background graphics are always made from 8x8 pixel tiles. Every single tile can use any or all of the 16 colors from any of the sixteen 16 color palettes reserved for background graphics! 256 unique tiles can be used.\n\nBackground tiles CAN NOT be flipped horizontally or vertically. \nEach background tile can be set to display either behind or in front of the sprites!Sprites: The PC-Engine/TG-16 can display 16 fifteen  color (plus a “clear” index for transparent pixels) sprites per scan line (row of pixels on screen).  You can have 64 sprites on screen in total, but any more than 16 per scan line will result in sprites flickering (becoming invisible). Each sprite can use any of the 16 sixteen color palettes available for sprites/You can individually set any sprite to be any of the following sizes: 16x16,16x32,16x64,32x16,32x32,32x64 Sprites CAN BE horizontally or vertically flipped !For more detailed technical references: https://www.zophar.net/fileuploads/2/10722gcgca/vdcdox.txt\n<http://archaicpixels.com/Main_Page>\n\nfor more information, click here: https://www.cosmigo.com/promotion/docs/onlinehelp/gfxHardware-TurboGrafx16.htm\n\n
colorConstraints.globalColors=
colorConstraints.useTilePalettes=0
colorConstraints.useColor0InsteadOfTilePaletteColor0=1
colorConstraints.limitOnTiles=0
colorConstraints.tileWidth=8
colorConstraints.tileHeight=8
colorConstraints.colorsPerTile=4
colorConstraints.limitMaxPaletteEntry=0
colorConstraints.maxPaletteEntry=255
colorConstraints.limitOverallColors=0
colorConstraints.overallColors=256

